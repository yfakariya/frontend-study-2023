@using GitHubViewer.Infrastructure;
@using GitHubViewer.Issues;
@using System.Globalization;

@attribute [Route(Routes.Issues + "/{Owner}/{Repository}/{IssueNumber:int}")]
@attribute [Authorize]

@inject IBrowserLauncher BrowserLauncher
@inject HttpClient HttpClient
@inject ILogger<Issue> Logger
@inject IStringLocalizer<Issue> L
@inject IStringLocalizer<EnumDisplay> EL
@inject IIssueRepository IssueRepository
@inject NavigationManager Navigation

<MudStack>
    @if (!String.IsNullOrEmpty(Error))
    {
        <ErrorPanel>
            <MudText>@Error</MudText>
        </ErrorPanel>
    }

    @if (CurrentIssue == null)
    {
        <MudProgressCircular Class="align-self-center flex-glow-1" Color="Color.Secondary" Indeterminate="true" />
    }
    else
    {
        <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
            <MudStack Row="true" AlignItems="AlignItems.Center">

                <MudChip Class="rounded-lg" Style="@($"background: {CurrentIssueStateColor}")">
                    <MudText Typo="Typo.button">
                        @EL[$"ItemState.{CurrentIssue.State.Value}"]
                    </MudText>
                </MudChip>
                <MudText>@Owner/@Repository</MudText>

                <MudAvatar Class="cursor-pointer" @onclick="OnClickAvatar">
                    <MudImage Src="@(CurrentIssue.User.AvatarUrl)" Alt="@AvatarAlt" />
                </MudAvatar>
                @if (!String.IsNullOrEmpty(CurrentIssue.User.HtmlUrl))
                {
                    <MudLink OnClick="OpenInBrowserAsync">@CurrentIssue.User.Login</MudLink>
                }
                else
                {
                    <MudText>@CurrentIssue.User.Login</MudText>
                }

                @if (!String.IsNullOrEmpty(CurrentIssue.User.Name))
                {
                    <MudText>@CurrentIssue.User.Name</MudText>
                }

                <MudSpacer />
                @if (CurrentIssue.UpdatedAt == null)
                {
                    <MudText>@CurrentIssue.CreatedAt.ToString("F", CultureInfo.CurrentCulture)</MudText>
                }
                else
                {
                    <MudText>@String.Format(CultureInfo.CurrentCulture, L["CreatedAtWithUpdatedAtTempalte"], CurrentIssue.CreatedAt, CurrentIssue.UpdatedAt)</MudText>
                }

            </MudStack>
        </MudHidden>

        <MudHidden Breakpoint="Breakpoint.Md" Invert="true">
            <MudStack Row="true" AlignItems="AlignItems.Center">

                <MudChip Class="rounded-lg" Style="@($"background: {CurrentIssueStateColor}")">
                    <MudText Typo="Typo.button">
                        @EL[$"ItemState.{CurrentIssue.State.Value}"]
                    </MudText>
                </MudChip>
                <MudText>@Owner/@Repository</MudText>

                <MudAvatar Class="cursor-pointer" @onclick="OnClickAvatar">
                    <MudImage Src="@(CurrentIssue.User.AvatarUrl)" Alt="@AvatarAlt" />
                </MudAvatar>
                @if (!String.IsNullOrEmpty(CurrentIssue.User.HtmlUrl))
                {
                    <MudLink OnClick="OpenInBrowserAsync">@CurrentIssue.User.Login</MudLink>
                }
                else
                {
                    <MudText>@CurrentIssue.User.Login</MudText>
                }

                @if (!String.IsNullOrEmpty(CurrentIssue.User.Name))
                {
                    <MudText>@CurrentIssue.User.Name</MudText>
                }

            </MudStack>

            <MudStack Row="true" AlignItems="AlignItems.Center">
                @if (CurrentIssue.UpdatedAt == null)
                {
                    <MudText>@CurrentIssue.CreatedAt.ToString("F", CultureInfo.CurrentCulture)</MudText>
                }
                else
                {
                    <MudText>@String.Format(CultureInfo.CurrentCulture, L["CreatedAtWithUpdatedAtTempalte"], CurrentIssue.CreatedAt, CurrentIssue.UpdatedAt)</MudText>
                }
            </MudStack>
        </MudHidden>

        <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
            <MudGrid>

                <MudItem xs="12" md="6">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudChip Class="rounded-lg" Style="@($"background: {CurrentIssueStateColor}")">
                            <MudText Typo="Typo.button">
                                @EL[$"ItemState.{CurrentIssue.State.Value}"]
                            </MudText>
                        </MudChip>
                        <MudText>@Owner/@Repository</MudText>
                    </MudStack>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudAvatar Class="cursor-pointer" @onclick="OnClickAvatar">
                            <MudImage Src="@(CurrentIssue.User.AvatarUrl)" Alt="@AvatarAlt" />
                        </MudAvatar>
                        @if (!String.IsNullOrEmpty(CurrentIssue.User.HtmlUrl))
                        {
                            <MudLink OnClick="OpenInBrowserAsync">@CurrentIssue.User.Login</MudLink>
                        }
                        else
                        {
                            <MudText>@CurrentIssue.User.Login</MudText>
                        }

                        @if (!String.IsNullOrEmpty(CurrentIssue.User.Name))
                        {
                            <MudText>@CurrentIssue.User.Name</MudText>
                        }
                    </MudStack>
                </MudItem>

                <MudItem xs="12" Style="text-align: end">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        @if (CurrentIssue.UpdatedAt == null)
                        {
                            <MudText>@CurrentIssue.CreatedAt.ToString("F", CultureInfo.CurrentCulture)</MudText>
                        }
                        else
                        {
                            <MudText>@String.Format(CultureInfo.CurrentCulture, L["CreatedAtWithUpdatedAtTempalte"], CurrentIssue.CreatedAt, CurrentIssue.UpdatedAt)</MudText>
                        }
                    </MudStack>
                </MudItem>

            </MudGrid>
        </MudHidden>

        @if (IssueHtml == null)
        {
            <MudProgressCircular Class="align-self-center flex-glow-1" Color="Color.Secondary" Indeterminate="true" />
        }
        else
        {
            <MudPaper Class="pa-4">@IssueHtml</MudPaper>
        }

        <MudDialog Options="@AvatarPopupOptions" @bind-IsVisible:get="IsAvatarPopupShown" @bind-IsVisible:set="SetIsAvatarPopupShown">
            <TitleContent />
            <DialogContent>
                <MudImage Src="@(CurrentIssue.User.AvatarUrl)" Alt="@AvatarAlt" ObjectFit="ObjectFit.ScaleDown" ObjectPosition="ObjectPosition.Center" Width="null" />
            </DialogContent>
        </MudDialog>
    }
</MudStack>

@code {
    [Parameter]
    public string Owner { get; set; } = default!;

    [Parameter]
    public string Repository { get; set; } = default!;

    [Parameter]
    public int IssueNumber { get; set; }

    [CascadingParameter]
    public IAppBarTitleAccessor AppBarTitleAccessor { get; set; } = default!;

    [CascadingParameter]
    public IParentNavigationRouteProvider ParentNavigationRouteProvider { get; set; } = default!;

    string? Error { get; set; }

    bool IsLoading { get; set; }

    Octokit.Issue? CurrentIssue { get; set; }

    MarkupString? IssueHtml { get; set; }

    string? AvatarAlt => String.Format(CultureInfo.CurrentCulture, L["AvatarAltTemplate"], CurrentIssue?.User.Login);

    string CurrentIssueStateColor =>
        CurrentIssue?.State == Octokit.ItemState.Open ? Colors.Green.Default : Colors.Purple.Default;

    DialogOptions AvatarPopupOptions { get; } =
        new DialogOptions
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                DisableBackdropClick = false,
                NoHeader = true,
                MaxWidth = MaxWidth.False,
            };

    bool IsAvatarPopupShown { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (IsLoading)
        {
            return;
        }

        if (CurrentIssue != null)
        {
            // For parent page transition, this OnParametersSetAsync could be called,
            // so we must avoid title/parent route overwrite for such situation.

            var path = $"/{Navigation.ToBaseRelativePath(Navigation.Uri)}";
            if (path.StartsWith(Routes.Issues) && !path.EndsWith(Routes.Issues))
            {
                // Support hot-reload
                ParentNavigationRouteProvider.SetParentRoute(Routes.Issues);
                AppBarTitleAccessor.SetTitle(Navigation.Uri, String.Format(CultureInfo.CurrentCulture, L["TitleTemplate"], CurrentIssue.Number, CurrentIssue.Title));
            }

            return;
        }

        ParentNavigationRouteProvider.SetParentRoute(Routes.Issues);
        AppBarTitleAccessor.SetTitle(Navigation.Uri, String.Format(CultureInfo.CurrentCulture, L["FallbackTitleTemplate"], IssueNumber));
        try
        {
            IsLoading = true;
            CurrentIssue = await IssueRepository.GetIssueAsync(Owner, Repository, IssueNumber);
            AppBarTitleAccessor.SetTitle(Navigation.Uri, String.Format(CultureInfo.CurrentCulture, L["TitleTemplate"], CurrentIssue.Number, CurrentIssue.Title));

            IssueHtml = new MarkupString(await IssueRepository.RenderMarkdownAsync(CurrentIssue.Body));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Failed to get issue #{IssueNumber} from {Owner}/{Repository}");
            Error = ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }

    void OnClickAvatar() => SetIsAvatarPopupShown(true);

    void SetIsAvatarPopupShown(bool value)
    {
        IsAvatarPopupShown = value;
    }

    async Task OpenInBrowserAsync()
    {
        var url = CurrentIssue?.User.HtmlUrl;
        if (!String.IsNullOrEmpty(url))
        {
            await BrowserLauncher.OpenAsync(url);
        }
    }
}
