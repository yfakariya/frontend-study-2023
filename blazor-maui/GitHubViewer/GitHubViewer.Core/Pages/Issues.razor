@using System.ComponentModel.DataAnnotations;
@using GitHubViewer.Infrastructure;
@using GitHubViewer.Issues;
@using System.Globalization;
@using System.Text.Json;
@using System.Diagnostics;

@attribute [Route(Routes.Issues)]
@attribute [Authorize]

@inject ILogger<Issues> Logger
@inject ISessionStorage<Issues> SessionStorage
@inject IStringLocalizer<Issues> L
@inject IIssueRepository IssueRepository
@inject NavigationManager Navigation

<MudStack AlignItems="AlignItems.Stretch" Class="d-flex">
    <MudExpansionPanels Class="flex-initial">
        <MudExpansionPanel Text="@L["SearchConditionHeader"]">
            <EditForm EditContext="@EditContext" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
                <DataAnnotationsValidator />

                <MudGrid>
                    @if (IsInvalid)
                    {
                        <MudItem Class="xs-12 mud-width-full">
                            <ErrorPanel Class="mb-4">
                                <MudStack>
                                    @L["ValidationErrorHeader"]
                                    <ValidationSummary />
                                </MudStack>
                            </ErrorPanel>
                        </MudItem>
                    }

                    @* TODO(yfakariya): labels, milestone *@
                    @* TODO(yfakariya): searchable dropdown *@
                    <MudItem xs="12" lg="6" xl="4" xxl="3">
                        <MudTextField @bind-Value="Model.Repository" For="() => Model.Repository" Label="@Label.FromDisplay(() => Model.Repository)" HelperText="@Description.FromDisplay(() => Model.Repository)" />
                    </MudItem>

                    <MudItem xs="12" lg="6" xl="4" xxl="3">
                        <MudSelect @bind-Value="Model.State" For="() => Model.State" Label="@Label.FromDisplay(() => Model.State)" HelperText="@Description.FromDisplay(() => Model.State)">
                            <MudSelectItem Value="@Octokit.ItemStateFilter.Open">@EnumDisplay.ItemStateFilter_Open</MudSelectItem>
                            <MudSelectItem Value="@Octokit.ItemStateFilter.Closed">@EnumDisplay.ItemStateFilter_Closed</MudSelectItem>
                            <MudSelectItem Value="@Octokit.ItemStateFilter.All">@EnumDisplay.ItemStateFilter_All</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" lg="6" xl="4" xxl="3">
                        <MudDatePicker @bind-Value="Model.Since" For="() => Model.Since" Label="@Label.FromDisplay(() => Model.Since)" HelperText="@Description.FromDisplay(() => Model.Since)" />
                    </MudItem>

                    <MudItem xs="12" lg="6" xl="4" xxl="3">
                        <MudSelect @bind-Value="Model.SortProperty" For="() => Model.SortProperty" Label="@Label.FromDisplay(() => Model.SortProperty)" HelperText="@Description.FromDisplay(() => Model.SortProperty)">
                            <MudSelectItem Value="@Octokit.IssueSort.Created">@EnumDisplay.IssueSort_Created</MudSelectItem>
                            <MudSelectItem Value="@Octokit.IssueSort.Updated">@EnumDisplay.IssueSort_Updated</MudSelectItem>
                            <MudSelectItem Value="@Octokit.IssueSort.Comments">@EnumDisplay.IssueSort_Comments</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" lg="6" xl="4" xxl="3">
                        <MudSelect @bind-Value="Model.SortDirection" For="() => Model.SortDirection" Label="@Label.FromDisplay(() => Model.SortDirection)" HelperText="@Description.FromDisplay(() => Model.SortDirection)">
                            <MudSelectItem Value="@Octokit.SortDirection.Ascending">@EnumDisplay.SortDirection_Ascending</MudSelectItem>
                            <MudSelectItem Value="@Octokit.SortDirection.Descending">@EnumDisplay.SortDirection_Descending</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" lg="6" xl="4" xxl="3">
                        <MudNumericField HideSpinButtons="true" Min="1" Max="100" @bind-Value="Model.IssuesPerPage" For="() => Model.IssuesPerPage" Label="@Label.FromDisplay(() => Model.IssuesPerPage)" HelperText="@Description.FromDisplay(() => Model.IssuesPerPage)" />
                    </MudItem>
                </MudGrid>

                <MudStack Justify="Justify.FlexEnd">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ma-2 ml-auto">@L["SearchButton"]</MudButton>
                </MudStack>
            </EditForm>
        </MudExpansionPanel>
    </MudExpansionPanels>

    @if (!String.IsNullOrEmpty(Error))
    {
        <ErrorPanel Class="flex-initial">
            <MudText>@Error</MudText>
        </ErrorPanel>
    }
    else if (IsLoading)
    {
        <MudProgressCircular Class="align-self-center flex-glow-1" Color="Color.Secondary" Indeterminate="true" />
    }
    else if (SearchedIssues.Count == 0)
    {
        <MudText Class="align-self-center flex-glow-1">@L["EmptyPlaceholder"]</MudText>
    }
    else
    {
        <MudText Class="flex-initial" Typo="Typo.h5">@String.Format(CultureInfo.CurrentCulture, L["SearchResultHeaderTemplate"], SearchedIssues.Count)</MudText>

        @* TODO: dynamic height *@
        <MudStack Class="flex-grow-1">
            <MudVirtualize Items="@SearchedIssues">
                <MudCard @key="context.Id" Class="cursor-pointer" onclick="@(() => OnIssueClick(context))">
                    <MudStack Class="ma-4">
                        <MudText Typo="Typo.subtitle1">@String.Format(CultureInfo.CurrentCulture, L["IssueTitleTemplate"], context.Number, context.Title)</MudText>
                        <MudText Typo="Typo.subtitle2">@String.Format(CultureInfo.CurrentCulture, L["IssueAttributesTemplate"], context.User.Login, context.CreatedAt, context.Repository?.FullName ?? Model.Repository)</MudText>
                    </MudStack>
                </MudCard>
            </MudVirtualize>
        </MudStack>
    }

    <MudStack Class="flex-initial" Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Baseline">
        <MudButton Variant="Variant.Text" Disabled="@(!CanGoToPreviousPage)" OnClick="GoToPreviousPage">@L["PreviousPage"]</MudButton>
        <MudText>@String.Format(CultureInfo.CurrentCulture, L["PageTemplate"], Page)</MudText>
        <MudButton Variant="Variant.Text" Disabled="@(!CanGoToNextPage)" OnClick="GoToNextPage">@L["NextPage"]</MudButton>
    </MudStack>
</MudStack>


@code {
    // Work around for https://github.com/octokit/octokit.net/issues/1762
    static readonly JsonSerializerOptions JsonSerializerOptions =
        new JsonSerializerOptions(JsonSerializerOptions.Default)
        {
            Converters =
            {
                StringEnumJsonConverterFactory.Instance,
            }
        };

    string? Error { get; set; }

    ViewModel Model { get; set; } = new();

    IssueSearchCondition? LastCondition { get; set; } = new();

    EditContext EditContext { get; set; } = default!;

    bool IsInvalid { get; set; } = false;

    bool IsLoading { get; set; } = false;

    IList<Octokit.Issue> SearchedIssues { get; set; } = Array.Empty<Octokit.Issue>();

    int Page { get; set; } = 1;

    bool CanGoToPreviousPage => Page > 1 && !IsLoading && !IsInvalid;
    bool CanGoToNextPage => (SearchedIssues.Count == Model.IssuesPerPage) && !IsLoading && !IsInvalid;

    protected override void OnInitialized()
    {
        EditContext = new(Model);
    }

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;
        StateHasChanged();

        try
        {
            var (conditionFound, condition) = await SessionStorage.GetAsync<IssueSearchCondition>(StorageKeys.Condition);
            if (conditionFound)
            {
                Model =
                    new ViewModel
                        {
                            IssuesPerPage = condition.IssuesPerPage,
                            Labels = condition.Labels,
                            Repository = condition.Repository ?? String.Empty,
                            Since = condition.Since?.LocalDateTime,
                            SortDirection = condition.SortDirection,
                            SortProperty = condition.SortProperty,
                            State = condition.State,
                        };

                var (pageFound, page) = await SessionStorage.GetAsync<int>(StorageKeys.Page);
                if (pageFound)
                {
                    Page = page;

                    var (resultFound, result) = await SessionStorage.GetAsync<string>(StorageKeys.Result);
                    if (resultFound)
                    {
                        SearchedIssues = JsonSerializer.Deserialize<Octokit.Issue[]>(result, JsonSerializerOptions) ?? Array.Empty<Octokit.Issue>();
                        StateHasChanged();
                        return;
                    }
                }
            }

            // initial search
            await SearchIssuesCore(Page);
        }
        finally
        {
            IsLoading = false;
        }
    }

    void OnInvalidSubmit()
    {
        IsInvalid = true;
    }

    async Task GoToPreviousPage()
    {
        if (!CanGoToPreviousPage || !EditContext.Validate())
        {
            return;
        }

        await SearchIssues(Page - 1);
    }

    async Task GoToNextPage()
    {
        if (!CanGoToNextPage || !EditContext.Validate())
        {
            return;
        }

        await SearchIssues(Page + 1);
    }

    async Task OnValidSubmit()
    {
        // Invalidate caches
        await SessionStorage.DeleteAsync(StorageKeys.Result);
        await SessionStorage.DeleteAsync(StorageKeys.Page);
        await SessionStorage.DeleteAsync(StorageKeys.Condition);
        await SearchIssues(Page);
    }

    Task SearchIssues(int page)
    {
        if (IsLoading)
        {
            return Task.CompletedTask;
        }

        return SearchIssuesCore(page);
    }

    async Task SearchIssuesCore(int page)
    {
        IsInvalid = false;
        try
        {
            IsLoading = true;

            var repositoryTokens = Model.Repository.Trim().Split('/');

            var (conditionFound, condition) = await SessionStorage.GetAsync<IssueSearchCondition>(StorageKeys.Condition);

            if (!conditionFound)
            {
                condition =
                    new IssueSearchCondition
                        {
                            IssuesPerPage = Model.IssuesPerPage,
                            Owner = repositoryTokens.Length == 2 ? repositoryTokens[0] : null,
                            Repository = repositoryTokens.Length == 2 ? repositoryTokens[1] : null,
                            Since = Model.Since,
                            SortDirection = Model.SortDirection,
                            SortProperty = Model.SortProperty,
                            State = Model.State
                        };

                await SessionStorage.SetAsync(StorageKeys.Condition, condition);
            }

            await SessionStorage.SetAsync(StorageKeys.Page, Page);

            SearchedIssues = (await IssueRepository.GetIssuesAsync(condition, Page).ConfigureAwait(false)).ToArray();
            Page = page;

            await SessionStorage.SetAsync(StorageKeys.Result, JsonSerializer.Serialize(SearchedIssues, JsonSerializerOptions));
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            Logger.LogError(ex, "Failed to get issues.");
        }
        finally
        {
            IsLoading = false;
        }
    }

    void OnIssueClick(Octokit.Issue issue)
    {
        Navigation.NavigateTo($"{Routes.Issues}/{issue.Repository.FullName}/{issue.Number}");
    }

    class ViewModel
    {
        [RegularExpression(
            @"^\s*([^\s/]+/[^\s/]+)?\s*$",
            ErrorMessageResourceType = typeof(Validation),
            ErrorMessageResourceName = nameof(Repository) + nameof(RegularExpressionAttribute)
        )]
        [Display(
            ResourceType = typeof(Issues_Display),
            Name = $"{nameof(Repository)}_Name",
            Description = $"{nameof(Repository)}_Description"
        )]
        public string Repository { get; set; } = String.Empty;

        [Range(
            1, 100,
            ErrorMessageResourceType = typeof(Validation),
            ErrorMessageResourceName = nameof(RangeAttribute)
        )]
        [Display(
            ResourceType = typeof(Issues_Display),
            Name = $"{nameof(IssuesPerPage)}_Name",
            Description = $"{nameof(IssuesPerPage)}_Description"
        )]
        public int? IssuesPerPage { get; set; } = 20;

        [Display(
            ResourceType = typeof(Issues_Display),
            Name = $"{nameof(State)}_Name",
            Description = $"{nameof(State)}_Description"
        )]
        public Octokit.ItemStateFilter State { get; set; } = Octokit.ItemStateFilter.Open;

        [Display(
            ResourceType = typeof(Issues_Display),
            Name = $"{nameof(SortDirection)}_Name",
            Description = $"{nameof(SortDirection)}_Description"
        )]
        public Octokit.SortDirection SortDirection { get; set; } = Octokit.SortDirection.Descending;

        [Display(
            ResourceType = typeof(Issues_Display),
            Name = $"{nameof(SortProperty)}_Name",
            Description = $"{nameof(SortProperty)}_Description"
        )]
        public Octokit.IssueSort SortProperty { get; set; } = Octokit.IssueSort.Created;

        [Display(
           ResourceType = typeof(Issues_Display),
           Name = $"{nameof(Since)}_Name",
           Description = $"{nameof(Since)}_Description"
       )]
        public DateTime? Since { get; set; }

        public IReadOnlyList<string> Labels { get; set; } = Array.Empty<string>();
    }

    static class StorageKeys
    {
        public const string Condition = "Condition";
        public const string Page = "Page";
        public const string Result = "Result";
    }
}
