@using GitHubViewer.Authentication;

@attribute [Route(AuthenticationOptions.DefaultSignOuteRoute)]
@attribute [Authorize]

@inject IGitHubAuthenticator Authenticator
@inject ILogger<SignOut> Logger
@inject IOptions<AuthenticationOptions> Options
@inject IStringLocalizer<SignOut> L
@inject NavigationManager Navigation

<MudCard Class="mt-4">
    @if (!String.IsNullOrEmpty(Error))
    {
        <ErrorPanel Class="mb-4">
            <MudText>@Error</MudText>
        </ErrorPanel>
    }

    <MudCardContent>
        <MudCheckBox @bind-Checked="RemovesPersistentData" Label="@L["RemovesPersistentDataLabel"]" />
    </MudCardContent>
    <MudCardActions>
        <MudButton OnClick="OnSubmit" Variant="Variant.Filled" Color="Color.Primary" Class="mx-4 mb-4">@L["SignOutButton"]</MudButton>
    </MudCardActions>

    <MudOverlay @bind-Visible="IsLoading" DarkBackground="true">
        <MudStack>
            <MudProgressCircular Class="align-self-center" Color="Color.Secondary" Indeterminate="true" />
            @L["SignOutProgress"]
        </MudStack>
    </MudOverlay>
</MudCard>

@code {
    string? Error { get; set; }

    bool IsLoading { get; set; } = false;

    bool RemovesPersistentData { get; set; } = false;

    async Task OnSubmit()
    {
        IsLoading = true;
        try
        {
            await Authenticator.SignOutAsync(RemovesPersistentData);
            Navigation.NavigateTo(Options.Value.SignInRoute, forceLoad: false, replace: true);
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            Logger.LogError(ex, "Failed to sign-out.");
        }
        finally
        {
            IsLoading = false;
        }
    }
}
