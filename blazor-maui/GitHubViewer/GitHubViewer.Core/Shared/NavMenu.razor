@using GitHubViewer.Authentication;
@inject IOptions<AuthenticationOptions> AuthenticationOptions
@inject IStringLocalizer<NavMenu> L

<MudNavMenu>
    <MudNavLink Href="@Routes.Home" Match="NavLinkMatch.All">@L[Routes.Home]</MudNavLink>
    @if (IsAnonymous)
    {
        <MudNavLink Href="@AuthenticationOptions.Value.SignInRoute" Match="NavLinkMatch.Prefix">@L[GitHubViewer.Authentication.AuthenticationOptions.DefaultSignInRoute]</MudNavLink>
    }
    else
    {
        <MudNavLink Href="@Routes.Issues" Match="NavLinkMatch.Prefix">@L[Routes.Issues]</MudNavLink>
        <MudNavLink Href="@AuthenticationOptions.Value.SignOutRoute" Match="NavLinkMatch.Prefix">@L[GitHubViewer.Authentication.AuthenticationOptions.DefaultSignOuteRoute]</MudNavLink>
    }
</MudNavMenu>

@code {
    bool IsAnonymous { get; set; } = true;

    [CascadingParameter]
    Task<AuthenticationState>? AuthenticationState { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        var authenticationState = AuthenticationState;
        if (authenticationState != null)
        {
            IsAnonymous = !((await authenticationState).User.Identity?.IsAuthenticated == true);
        }
    }
}
