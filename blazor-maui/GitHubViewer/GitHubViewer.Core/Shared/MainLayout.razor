@using GitHubViewer.Infrastructure;
@using System.Runtime.InteropServices;

@inherits LayoutComponentBase

@inject ILogger<MainLayout> Logger
@inject IStringLocalizer<MainLayout> L
@inject IStringLocalizer<NavMenu> RoutesLocalization
@inject IWindowTitleAccessor WindowTitleAccessor
@inject NavigationManager Navigation

<MudRTLProvider>
    <MudThemeProvider @ref="ThemeProvider" @bind-IsDarkMode="IsDarkMode" />
    <MudDialogProvider />
    <MudSnackbarProvider />

    <MudLayout>
        <MudAppBar>
            @if (String.IsNullOrEmpty(ParentNavigationRouteProvider.ParentRoute))
            {
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => ToggleDrawer())" />
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => BackToParent())" />
            }
            <MudText Typo="Typo.h5" Class="ml-3">@Title</MudText>
        </MudAppBar>
        <MudDrawer @bind-Open="@IsDrawerOpen" ClipMode="DrawerClipMode.Always">
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            <MudHidden Breakpoint="Breakpoint.Sm" Invert="true">
                <MudContainer MaxWidth="MaxWidth.False" Class="pt-2" />
            </MudHidden>
            <MudContainer MaxWidth="MaxWidth.False" Class="pt-4">
                <CascadingValue TValue="IAppBarTitleAccessor" Value="AppBarTitleAccessor">
                    <CascadingValue TValue="IParentNavigationRouteProvider" Value="ParentNavigationRouteProvider">
                        @Body
                    </CascadingValue>
                </CascadingValue>
            </MudContainer>
        </MudMainContent>
    </MudLayout>
</MudRTLProvider>

@code {
    MudThemeProvider ThemeProvider { get; set; } = null!;

    bool IsDarkMode { get; set; }

    bool IsDrawerOpen { get; set; } = false;

    RouteData? RouteData => (Body?.Target as AuthorizeRouteView)?.RouteData;

    ParentNavigationRouteProvider ParentNavigationRouteProvider { get; set; } = default!;

    AppBarTitleAccessor AppBarTitleAccessor { get; set; } = default!;

    string Title { get; set; } = default!;

    string AppTitle => $"{Title} - {L["Title"]}";

    protected override void OnInitialized()
    {
        ParentNavigationRouteProvider = new();
        AppBarTitleAccessor = new(
            title =>
            {
                if (title != Title)
                {
                    Title = title;
                    StateHasChanged();
                }
            }
        );
    }

    protected override void OnParametersSet()
    {
        ParentNavigationRouteProvider.Reset();
        AppBarTitleAccessor.Reset(Navigation.Uri);
        Title = RoutesLocalization[Navigation.ToAbsoluteUri(Navigation.Uri).AbsolutePath];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsDarkMode = await ThemeProvider.GetSystemPreference();
            await ThemeProvider.WatchSystemPreference(
#pragma warning disable CS1998
                async (isDarkmode) =>
#pragma warning restore CS1998
                {
                    IsDarkMode = isDarkmode;
                    StateHasChanged();
                });
            StateHasChanged();
        }

        // Prevent infinite-loop
        if (WindowTitleAccessor.HasWindow && WindowTitleAccessor.Title != AppTitle)
        {
            WindowTitleAccessor.Title = AppTitle;
            StateHasChanged();
        }
    }

    void ToggleDrawer()
    {
        IsDrawerOpen = !IsDrawerOpen;
    }

    void BackToParent()
    {
        if (ParentNavigationRouteProvider.ParentRoute != null)
        {
            Navigation.NavigateTo(ParentNavigationRouteProvider.ParentRoute);
        }
    }
}
