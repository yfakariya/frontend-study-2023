@using System.ComponentModel.DataAnnotations;
@using System.Globalization
@using GitHubViewer.Authentication;
@using GitHubViewer.Infrastructure;

@attribute [Route(AuthenticationOptions.DefaultSignInRoute)]

@inject IBrowserLauncher BrowserLauncher
@inject CredentialsRepository CredentialsRepository
@inject IGitHubAuthenticator Authenticator
@inject ILogger<SignIn> Logger
@inject IStringLocalizer<SignIn> L
@inject NavigationManager Navigation

<MudCard>
    <EditForm Model="@Model" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
        <DataAnnotationsValidator />

        <MudCardContent Class="pa-4">

            @if (IsInvalid)
            {
                <ErrorPanel Class="mb-4">
                    <MudStack>
                        @L["ValidationErrorHeader"]
                        <ValidationSummary />
                    </MudStack>
                </ErrorPanel>
            }

            @if (!String.IsNullOrEmpty(Error))
            {
                <ErrorPanel Class="mb-4">
                    <MudText>@Error</MudText>
                </ErrorPanel>
            }

            <InfoPanel Class="mb-4">
                @* TODO: L10N *@
                <MudText>
                    @L["ClientIdAndSecretDescriptionPrefix"]
                    <BrowserLink Href="@GitHubLink" OnOpenBrowserLink="@ClickGitHubLink">
                        @GitHubLink
                    </BrowserLink>
                    @L["ClientIdAndSecretDescriptionSuffix"]
                </MudText>
            </InfoPanel>

            <MudTextField @bind-Value="Model.ClientId" For="() => Model.ClientId" Label="@Label.FromDisplay(() => Model.ClientId)" HelperText="@Description.FromDisplay(() => Model.ClientId)" />
            <MudTextField @bind-Value="Model.ClientSecret" InputType="@InputType.Password" For="() => Model.ClientSecret" Label="@Label.FromDisplay(() => Model.ClientSecret)" HelperText="@Description.FromDisplay(()=> Model.ClientSecret)" />
            <MudCheckBox @bind-Checked="Model.Persists" Label="@L["PersistsLabel"]" />
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ma-2 ml-auto">@L["SignInButton"]</MudButton>
        </MudCardActions>

    </EditForm>

    <MudOverlay @bind-Visible="IsLoading" DarkBackground="true">
        <MudStack>
            <MudProgressCircular Class="align-self-center" Color="Color.Secondary" Indeterminate="true" />
            @L["SingInProgress"]
        </MudStack>
    </MudOverlay>
</MudCard>

@code {
    string GitHubLink
        => $"https://docs.github.com/{CultureInfo.CurrentUICulture.Parent.Name}/developers/apps/building-oauth-apps/creating-an-oauth-app";

    string? Error { get; set; }

    ViewModel Model { get; set; } = new ViewModel();

    bool IsInvalid { get; set; } = false;

    bool IsLoading { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        var credentials = await CredentialsRepository.GetCredentialsAsync();
        if (credentials != null)
        {
            Model.ClientId = credentials.ClientId;
            Model.ClientSecret = credentials.ClientSecret;
        }
    }

    public async Task ClickGitHubLink(BrowserLinkEventArgs e)
    {
        try
        {
            await e.OpenBrowser;
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            Logger.LogError(ex, "Failed to launch browser.");
        }
    }

    void OnInvalidSubmit()
    {
        IsInvalid = true;
    }

    async Task OnValidSubmit()
    {
        IsInvalid = false;
        try
        {
            IsLoading = true;
            await Authenticator.SignInAsync(Model.ClientId, Model.ClientSecret, Model.Persists);
            Navigation.NavigateTo(Routes.Home, forceLoad: false, replace: true);
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            Logger.LogError(ex, "Failed to sign-in.");
        }
        finally
        {
            IsLoading = false;
        }
    }

    class ViewModel
    {
        [Required(
            ErrorMessageResourceType = typeof(ValidationResources),
            ErrorMessageResourceName = nameof(RequiredAttribute)
        )]
        [MinLength(
            1,
            ErrorMessageResourceType = typeof(ValidationResources),
            ErrorMessageResourceName = nameof(MinLengthAttribute)
        )]
        [Display(
            ResourceType = typeof(SignIn_Display),
            Name = $"{nameof(ClientId)}_Name",
            Description = $"{nameof(ClientId)}_Description"
        )]
        public string ClientId { get; set; } = default!;

        [Required(
            ErrorMessageResourceType = typeof(ValidationResources),
            ErrorMessageResourceName = nameof(RequiredAttribute)
        )]
        [MinLength(
            1,
            ErrorMessageResourceType = typeof(ValidationResources),
            ErrorMessageResourceName = nameof(MinLengthAttribute)
        )]
        [Display(
            ResourceType = typeof(SignIn_Display),
            Name = $"{nameof(ClientSecret)}_Name",
            Description = $"{nameof(ClientSecret)}_Description"
        )]
        public string ClientSecret { get; set; } = default!;

        public bool Persists { get; set; } = false;
    }
}
